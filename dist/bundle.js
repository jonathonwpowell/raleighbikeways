!function(e){var n={};function t(i){if(n[i])return n[i].exports;var o=n[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var o in e)t.d(i,o,function(n){return e[n]}.bind(null,o));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=1)}([function(e,n,t){"use strict";t.r(n),t.d(n,"layerStyles",(function(){return l})),t.d(n,"directionStyle",(function(){return c}));const i="#3498DB",o="#28B463",r="#EEE",a="#CC0000",l={RALEIGH_ROAD_EXISTING:{"line-color":["match",["get","Type"],"Bike Lane",r,"Bike Lane/Shared Lane Markings",r,"Buffered Bike Lane",r,"Buffered Bike Lane/Bike Lane",r,"Buffered Bike Lane/Shared Lane Markings",r,"Separated Bike Lane",r,"Multi-Use Path",r,"grey"],"line-width":["match",["get","Type"],"Bike Lane",1.5,"Bike Lane/Shared Lane Markings",1.5,"Buffered Bike Lane",2,"Buffered Bike Lane/Bike Lane",2,"Buffered Bike Lane/Shared Lane Markings",2,"Separated Bike Lane",2,"Multi-Use Path",1.5,0]},RALEIGH_ROAD_EXISTING_DASHED:{"line-color":["match",["get","Type"],"Neighborhood Bikeway",r,"Shared Lane Markings",r,"Unknown",r,"grey"],"line-width":["match",["get","Type"],"Neighborhood Bikeway",1.5,"Shared Lane Markings",1.5,"Unknown",1.5,0],"line-dasharray":[1,2]},RALEIGH_GREENWAYS:{"line-color":["match",["get","GWSTATUS"],"CLOSED_TEMP",a,o],"line-width":1.5,"line-opacity":["case",["all",[">",["get","WIDTH_FT"],6],["match",["get","MATERIAL"],["Natural","Gravel"],!1,!0]],1,0]},RALEIGH_GREENWAYS_DASHED:{"line-color":["match",["get","GWSTATUS"],"CLOSED_TEMP",a,o],"line-width":1.5,"line-opacity":["case",["all",[">",["get","WIDTH_FT"],6],["match",["get","MATERIAL"],["Natural","Gravel"],!1,!0]],0,1],"line-dasharray":[1,2]},GREENWAYS_DETOURS:{"line-color":"yellow","line-width":1.5},GREENWAY_CLOSED_SYMBOL:{"text-color":"#FF0000","text-halo-width":1,"text-halo-color":"black"},RALEIGH_ROAD_PROGRAMMED:{"line-color":["match",["get","Type"],"Bike Lane",i,"Bike Lane/Shared Lane Markings",i,"Buffered Bike Lane",i,"Buffered Bike Lane/Bike Lane",i,"Buffered Bike Lane/Shared Lane Markings",i,"Separated Bike Lane",i,"Multi-Use Path",i,"grey"],"line-width":["match",["get","Type"],"Bike Lane",1.5,"Bike Lane/Shared Lane Markings",1.5,"Buffered Bike Lane",2,"Buffered Bike Lane/Bike Lane",2,"Buffered Bike Lane/Shared Lane Markings",2,"Separated Bike Lane",2,"Multi-Use Path",1.5,0]},RALEIGH_ROAD_PROGRAMMED_DASHED:{"line-color":["match",["get","Type"],"Neighborhood Bikeway",i,"Shared Lane Markings",i,"Unknown",i,"grey"],"line-width":["match",["get","Type"],"Neighborhood Bikeway",1.5,"Shared Lane Markings",1.5,"Unknown",1.5,0],"line-dasharray":[1,2]},CARY_ROAD_EXISTING:{"line-color":r,"line-width":["match",["get","FACILTYTYPE"],["STRIPED"],1.5,["PROTECTED BIKE LANES"],2,0]},CARY_ROAD_EXISTING_DASHED:{"line-color":r,"line-width":["match",["get","FACILTYTYPE"],["STRIPED","PROTECTED BIKE LANES"],0,1.5],"line-opacity":["match",["get","SPEEDLIMIT"],["25","25 MPH"],1,0],"line-dasharray":[1,2]},CARY_GREENWAYS_EXISTING:{"line-color":o,"line-width":1.5,"line-opacity":["case",["all",[">",["get","WIDTH"],6],["match",["get","SURFTYPE"],["Aggregate","Limestone","Gravel"],!1,!0]],1,0]},CARY_GREENWAYS_EXISTING_DASHED:{"line-color":o,"line-width":1.5,"line-opacity":["case",["all",[">",["get","WIDTH"],6],["match",["get","SURFTYPE"],["Aggregate","Limestone","Gravel"],!1,!0]],0,1],"line-dasharray":[1,2]},CITRIX_CYCLE:{"circle-color":"#f9423a","circle-radius":4}},c=[{id:"directions-route-line",type:"line",source:"directions",layout:{"line-cap":"butt","line-join":"round"},paint:{"line-color":{property:"congestion",type:"categorical",default:"#4882c5",stops:[["unknown","#4882c5"],["low","#4882c5"],["moderate","#f09a46"],["heavy","#e34341"],["severe","#8b2342"]]},"line-width":7,"line-opacity":.5},filter:["all",["in","$type","LineString"],["in","route","selected"]]},{id:"directions-route-line-casing",type:"line",source:"directions",layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#2d5f99","line-width":12,"line-opacity":.5},filter:["all",["in","$type","LineString"],["in","route","selected"]]}]},function(e,n,t){t(2),t(0),t(3)},function(e,n,t){"use strict";t.r(n);var i=t(0);mapboxgl.accessToken="pk.eyJ1IjoicGV0ZXJib3llciIsImEiOiJjanF5aHpuYXAwMGhvNDl0MmRkN3F2cHpxIn0.cdJjFtN1PHLcMZTlGC1WNg";const o="existing-bike-facilities-layer",r="existing-bike-facilities-dashed-layer",a="programmed-bike-facilities-layer",l="programmed-bike-facilities-dashed-layer",c="existing-raleigh-greenways-layer",s="existing-raleigh-greenways-dashed-layer",d="raleigh-greenway-symbol-layer",p="cary-greenways-layer",u="cary-greenways-dashed-layer",g="greenway-detour-layer",y="cary-bikes-layer",f="cary-bikes-dashed-layer",h="citrix-cycle-stations-layer",m="existing-greenways-raleigh",S="cary-greenways",x="greenway-detour",b="cary-bikes",E="existing-bike-facilities",k="programmed-bike-facilities",w="citrix-cycle-stations";let L=new mapboxgl.Map({container:"map",style:"mapbox://styles/peterboyer/cjr49i1ql0mza2srxxtgqlpqw",center:[-78.638176,35.779591],zoom:12});const v=new mapboxgl.GeolocateControl({positionOptions:{enableHighAccuracy:!0},trackUserLocation:!0});let I;v.on("geolocate",e=>{I=[e.coords.longitude,e.coords.latitude]}),L.addControl(v,"bottom-right"),L.addControl(new mapboxgl.NavigationControl);let A=!1;const T=new MapboxDirections({accessToken:mapboxgl.accessToken,profile:"mapbox/cycling",styles:i.directionStyle,interactive:!1,controls:{profileSwitcher:!1}});function _(e){let n="";for(let t in e)n+=`${t}=${e[t].toString()}&`;return n.slice(0,-1)}L.addControl(T,"top-left");let R=_({where:"1=1",outSR:4326,outFields:"*",f:"geojson"}),B=_({where:"STATUS LIKE 'EXISTING'",outSR:4326,outFields:"*",f:"geojson"}),D=_({where:"STATUS LIKE 'EXISTING' AND OBJECTID <> 645",outSR:4326,outFields:"*",f:"geojson"}),G=_({where:"status LIKE 'open'",outSR:4326,outFields:"*",f:"geojson"}),M=`https://services.arcgis.com/v400IkDOw1ad7Yad/ArcGIS/rest/services/Greenway_Trails_All/FeatureServer/0/query?${R}`,N=`https://maps.townofcary.org/arcgis1/rest/services/OpenData/MapServer/17/query?${B}`,O=`https://maps.townofcary.org/arcgis1/rest/services/OpenData/MapServer/16/query?${D}`,C=`https://services.arcgis.com/v400IkDOw1ad7Yad/ArcGIS/rest/services/Existing_Bike_Facilities/FeatureServer/6/query?${R}`,j=`https://services.arcgis.com/v400IkDOw1ad7Yad/ArcGIS/rest/services/Programmed_Bike_Facilities/FeatureServer/6/query?${R}`,Y=`https://services.arcgis.com/v400IkDOw1ad7Yad/arcgis/rest/services/Citrix_Cycle_Stations/FeatureServer/0/query?${G}`;L.on("load",()=>{L.addSource(E,{type:"geojson",data:C}),L.addLayer({id:o,type:"line",source:E,layout:{},paint:i.layerStyles.RALEIGH_ROAD_EXISTING}),L.addLayer({id:r,type:"line",source:E,layout:{},paint:i.layerStyles.RALEIGH_ROAD_EXISTING_DASHED}),L.addSource(b,{type:"geojson",data:O}),L.addLayer({id:y,type:"line",source:b,layout:{},paint:i.layerStyles.CARY_ROAD_EXISTING}),L.addLayer({id:f,type:"line",source:b,layout:{},paint:i.layerStyles.CARY_ROAD_EXISTING_DASHED}),L.addSource(k,{type:"geojson",data:j}),L.addLayer({id:a,type:"line",source:k,layout:{},paint:i.layerStyles.RALEIGH_ROAD_PROGRAMMED}),L.addLayer({id:l,type:"line",source:k,layout:{},paint:i.layerStyles.RALEIGH_ROAD_PROGRAMMED_DASHED}),L.addSource(m,{type:"geojson",data:M}),L.addLayer({id:c,type:"line",source:m,layout:{},paint:i.layerStyles.RALEIGH_GREENWAYS}),L.addLayer({id:d,type:"symbol",source:m,layout:{"text-field":["match",["get","GWSTATUS"],"CLOSED_TEMP","X",""],"symbol-placement":"line-center"},paint:i.layerStyles.GREENWAY_CLOSED_SYMBOL}),L.addSource(x,{type:"geojson",data:"https://gist.githubusercontent.com/jonathonwpowell/51172dccc17cf8a832ff6566e700c2d8/raw/map.geojson"}),L.addLayer({id:g,type:"line",source:x,layout:{},paint:i.layerStyles.GREENWAYS_DETOURS}),L.addLayer({id:s,type:"line",source:m,layout:{},paint:i.layerStyles.RALEIGH_GREENWAYS_DASHED}),L.addSource(S,{type:"geojson",data:N}),L.addLayer({id:p,type:"line",source:S,layout:{},paint:i.layerStyles.CARY_GREENWAYS_EXISTING}),L.addLayer({id:u,type:"line",source:S,layout:{},paint:i.layerStyles.CARY_GREENWAYS_EXISTING_DASHED}),L.addSource(w,{type:"geojson",data:Y}),L.addLayer({id:h,type:"circle",source:w,layout:{},paint:i.layerStyles.CITRIX_CYCLE}),L.resize()}),document.getElementById("show-directions-container").addEventListener("click",(function(){A?(document.getElementsByClassName("mapboxgl-ctrl-directions")[0].style.display="none",document.getElementById("show-directions-container").style.display="block",document.getElementById("direction-buttons").style.display="none",T.interactive(!1),A=!1):(document.getElementsByClassName("mapboxgl-ctrl-directions")[0].style.display="block",document.getElementById("show-directions-container").style.display="none",document.getElementById("direction-buttons").style.display="block",T.interactive(!0),A=!0)}))},function(e,n,t){var i=t(4),o=t(5);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var r={insert:"head",singleton:!1},a=(i("!!../node_modules/css-loader/dist/cjs.js!./styles.css",o,r),o.locals?o.locals:{});e.exports=a},function(e,n,t){"use strict";var i,o={},r=function(){return void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i},a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}();function l(e,n,t){e=t.base?e+t.base:e,o[e]||(o[e]=[]);for(var i=0;i<n.length;i++){var r=n[i],a={css:r[1],media:r[2],sourceMap:r[3]},l=o[e];l[i]?l[i].updater(a):l.push({updater:f(a,t)})}for(var c=n.length;c<o[e].length;c++)o[e][c].updater();o[e].length=n.length,0===o[e].length&&delete o[e]}function c(e){var n=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=t.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){n.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(n);else{var r=a(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}return n}var s,d=(s=[],function(e,n){return s[e]=n,s.filter(Boolean).join("\n")});function p(e,n,t,i){var o=t?"":i.css;if(e.styleSheet)e.styleSheet.cssText=d(n,o);else{var r=document.createTextNode(o),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(r,a[n]):e.appendChild(r)}}function u(e,n,t){var i=t.css,o=t.media,r=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),r&&btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var g=null,y=0;function f(e,n){var t,i,o;if(n.singleton){var r=y++;t=g||(g=c(n)),i=p.bind(null,t,r,!1),o=p.bind(null,t,r,!0)}else t=c(n),i=u.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return i(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;i(e=n)}else o()}}e.exports=function(e,n,t){return(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=r()),l(e,n,t),function(n){l(e,n||[],t)}}},function(e,n,t){(n=t(6)(!1)).push([e.i,"\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: 'Lato', sans-serif;\n}\n\n#map {\n    position: absolute;\n    top: 75px;\n    bottom: 0px;\n    width: 100%;\n}\n\n#header {\n    position: flex;\n    top: 0;\n    height: 75px;\n    width: 100%;\n    background: whitesmoke;\n}\n\n#title {\n    display: inline-block;\n    padding: 20px 0px 20px 10px;\n    font-size: 28px;\n}\n\n#footer {\n    position: absolute;\n    height: 80px;\n    bottom: 0;\n    width: 100%;\n    background: whitesmoke;\n}\n\n#keyTitle {\n    background: #2c2c2c;\n    height: 30px;\n    font-weight: bold;\n    text-align: center;\n    color: white;\n    text-transform: uppercase;\n    letter-spacing: 0.6em;\n    box-sizing: border-box;\n    padding: 6px;\n    font-size: 13px;\n}\n\n#key {\n    height: 50px;\n    display: flex;\n    justify-content: space-evenly;\n}\n\n.keyEle {\n    text-align: center;\n    text-transform: uppercase;\n    letter-spacing: 0.1em;\n    color: white;\n    padding: 15px;\n    font-size: 14px;\n    font-weight: bold;\n    flex-grow: 1;\n    box-sizing: border-box;\n    height: 50px;\n    width: 300px;\n}\n\n.modal-container {\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 10;\n    top: 0px\n}\n\n.modal {\n    position: relative;\n    margin: 0 auto;\n    z-index: 10;\n    padding: 10px;\n}\n\n#info-icon {\n    float: right;\n    cursor: pointer;\n    color: #444;\n    padding: 17px 4px 17px 4px;\n}\n\n#info-box {\n    background-color: #2c2c2c;\n    top: 100px;\n    width: 60%;\n}\n\n#info-box {\n    color: white;\n    font-size: 14px;\n}\n\n#info-box a {\n    color: white;\n}\n\n#info-box a:hover {\n    color: #000;\n}\n\n#legend-icon-container {\n    width: fit-content;\n    float: right;\n    cursor: pointer;\n    padding: 17px 8px 17px 8px;\n}\n\n#legend-icon-container > i {\n    cursor: pointer;\n}\n\n#legend-box {\n    width: fit-content;\n    height: fit-content;\n    background-color: gray;\n    font-size: 16px;\n    top: 150px;\n}\n\n#legend-box td {\n    padding-bottom: 10px;\n    padding-left: 10px;\n}\n\n#legend-box .legend-checkbox{\n    transform: scale(1.5);\n    margin-right: 20px;\n    cursor: pointer;\n}\n\n.mapboxgl-ctrl-directions {\n    display: none;\n}\n\n#direction-buttons {\n    position: relative;\n    z-index: 5;\n    margin-top: 95px;\n    margin-left: 200px;\n    width: fit-content;\n}\n\n#show-directions-container {\n    position: relative;\n    z-index: 5;\n    margin: 30px;\n    width: fit-content;\n}\n\n#existing {\n    background: #eee;\n    color: black;\n}\n\n#greenways {\n    background: #28B463;\n}\n\n#programmed {\n    background: #3498DB;\n}\n\n#citrix {\n    background: #f9423a;\n}\n\n.mapboxgl-ctrl-group > button{\n    width: 40px !important;\n    height: 40px !important;\n}\n\n.mapboxgl-ctrl-geolocate > button{\n    width: 40px !important;\n    height: 40px !important;\n}\n\n.mapboxgl-ctrl-bottom-right .mapboxgl-ctrl-group {\n    margin: 0 30px 30px 0 !important;\n}\n\n.mapboxgl-ctrl-top-right .mapboxgl-ctrl {\n    margin: 30px 30px 0 0 !important;\n}\n\n.greenway-legend {\n    stroke: #28B463;\n    stroke-width: 8;\n    padding-top: 5px;\n}\n\n\n.greenway-detour-legend {\n    stroke: yellow;\n    stroke-width: 8;\n    padding-top: 5px;\n}\n\n.existing-legend {\n    stroke: #eee;\n    stroke-width: 8;\n    padding-top: 5px;\n}\n\n.programmed-legend {\n    stroke: #3498DB;\n    stroke-width: 8;\n    padding-top: 5px;\n}\n\n/* Meterial Icons Styles */\n.material-icons.md-18 { font-size: 18px; }\n.material-icons.md-24 { font-size: 24px; }\n.material-icons.md-36 { font-size: 36px; }\n.material-icons.md-48 { font-size: 48px; }\n.material-icons.md-dark { color: rgba(0, 0, 0, 0.54); }\n.material-icons.md-dark.md-inactive { color: rgba(0, 0, 0, 0.26); }\n.material-icons.md-light { color: rgba(255, 255, 255, 1); }\n.material-icons.md-light.md-inactive { color: rgba(255, 255, 255, 0.3); }\n\n.noselect {\n    -webkit-touch-callout: none; /* iOS Safari */\n    -webkit-user-select: none; /* Safari */\n    -khtml-user-select: none; /* Konqueror HTML */\n    -moz-user-select: none; /* Old versions of Firefox */\n    -ms-user-select: none; /* Internet Explorer/Edge */\n    user-select: none; /* Non-prefixed version, currently\n                                supported by Chrome, Opera and Firefox */\n}",""]),e.exports=n},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",i=e[3];if(!i)return t;if(n&&"function"==typeof btoa){var o=(a=i,l=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(l),"/*# ".concat(c," */")),r=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot).concat(e," */")}));return[t].concat(r).concat([o]).join("\n")}var a,l,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var i=0;i<e.length;i++){var o=[].concat(e[i]);t&&(o[2]?o[2]="".concat(t," and ").concat(o[2]):o[2]=t),n.push(o)}},n}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,